name: Tag and Release Updated GitHub Action

on:
  push:
    branches:
      - 'main'
  pull_request:
    branches:
      - 'main'
      - 'next'

jobs:
  release:
    if: (!contains(github.event.head_commit.message, 'build(release)') && !contains(github.event.head_commit.message, 'ci skip') && !contains(github.event.head_commit.message, 'skip ci'))
    name: Release GitHub Actions
    runs-on: ubuntu-latest
    permissions:
      actions: write
      contents: write
    env:
      NPM_AUTH_TOKEN: ${{ secrets.NPM_AUTH_TOKEN }}
      NPM_TOKEN: ${{ secrets.NPM_AUTH_TOKEN }}
      GITHUB_TOKEN: ${{ secrets.RELEASE_TOKEN }}
    steps:
      - uses: bitflight-devops/shell-scripts@v2
        name: Install shell utility scripts

      - uses: actions/checkout@v3.1.0
        with:
          path: github-actions-download-release-asset

      - uses: actions/setup-node@v3
        working-directory: github-actions-download-release-asset
        with:
          node-version: '16.x'
          cache: yarn

      - name: Configure PATH
        run: |
          mkdir -p "$HOME/.local/bin"
          add_to_path "$HOME/.local/bin"

      - uses: actions/cache@v3
        if: always()
        working-directory: github-actions-download-release-asset
        id: yarn-cache # use this to check for `cache-hit` (`steps.yarn-cache.outputs.cache-hit != 'true'`)
        with:
          path: |
            .yarn/cache
            node_modules
            ${{env.HOME}}/.cache
            ${{env.HOME}}/.local
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}-${{hashFiles('.github/workflows/release_action.yml')}}
          restore-keys: |
            ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}-${{hashFiles('.github/workflows/release_action.yml')}}
            ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}-
            ${{ runner.os }}-yarn-

      - name: Configure Git
        working-directory: github-actions-download-release-asset
        run: |
          git config --global user.email "${{github.event.pusher.email || 'stack@bitflight.io'}}"
          git config --global user.name "${{github.event.pusher.name || 'GitHub[bot]'}}"
          git fetch --tags
          git status --porcelain -u


      - name: Install Deps
        id: deps
        working-directory: github-actions-download-release-asset
        run: |
          yarn install
          git status --porcelain -u
          git diff package.json

      - name: Build
        id: build
        working-directory: github-actions-download-release-asset
        run: |
          yarn run package

      - name: Run tests
        working-directory: github-actions-download-release-asset
        run: |
          yarn run test
          git status --porcelain -u

      - name: Ship It
        working-directory: github-actions-download-release-asset
        id: shipit
        run: |
          git status --porcelain -u
          set_env new_version "$(jq -r '.version' package.json)"
          git add -f dist package.json && \
            git commit -m "build(release): version $(new_version)" && \
            git tag -a "v$(new_version)" -m "build(release): version $(new_version)"
          # yarn auto shipit -vv

      - name: Push a GitHub release
        uses: ncipollo/release-action@v1
        working-directory: github-actions-download-release-asset
        with:
          tag: v${{ steps.shipit.outputs.new_version }}
          name: Release ${{ steps.shipit.outputs.new_version }}
          artifacts: dist/index.js
          token: ${{ github.token }}

      - name: test that release is there
        uses: ./
        with:
          tag_name: v${{ steps.shipit.outputs.new_version }}
          github_token: ${{ github.token }}
          path: /tmp/index.js

      - name: compare the files
        run: |
          diff dist/index.js /tmp/index.js
